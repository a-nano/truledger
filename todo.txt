Periodic task to assess storage fees for inactive balances.

----------------------------------------------------------------------

Expiration times for coupons and keys. Explicit key expiration,
signing the new key so people can trust it. Probably a good time to
enable changing the server URL as well. And a key's passphrase.

----------------------------------------------------------------------

Line-level encryption.

  sent: (<id>,newsessionkey,<serverid>,<req#>)
  rcvd: (<serverid>,@newsessionkey,<serverid>,(<id>,newsessionkey,<serverid>,<req#>),<pubkey encrypted: [<sessionid>,<sessionkey>]>)
           or
        (<serverid>,failed,(<id>,newsessionkey,<serverid>,<req#>),errcode:<errcode>,reason:<reason>)

  sent: [<sessionid>,<sessionkey encrypted: message>]
  rcvd: [<sessionid>,<sessionkey encrypted: response>]
           or
        [<sessionid>,unknown] if the <sessionid> isn't registered

  sent: [<sessionid>,
         <sessionkey encrypted: (<id>,closesession,<serverid>,<sessionid>)>]
  rcvd: [<sessionid>,
         <sessionkey encrypted:
           (<serverid>,@closesession,(<id>,closesession,<serverid>,<sessionid>))>]

Or:

----------------------------------------------------------------------

Verify SSL certificate validation for https connection. This closes
the big known method to compromise SSL with a man-in-the-middle attack
using a compromised Certificate Authority (CA) certificate. It also
enables validation of a self-signed certificate. Trust the owner and
integrity of the server's private key, and you can trust the SSL
certificate, too. Still need to be able to specify a password for the
SSL private key, stored in the DB, encrypted to the server's private
key. Means the current command line SSL certificate params need to be
in the database and on the web UI "Admin" page. That's a problem for
listening on ports 80/443, since we don't know the server's private
key until the web server has been started and we've switched to user
mode. Maybe I can sneak a way to do this into the Hunchentoot
SSL code (or maybe it's already there). Not a problem if the 80/443
listening is done by reverse proxies, which will likely be the case
for real installations.

  Customer sends:

(0,sslinfo,<serverid>,<random#>):0

  Server returns:

(<serverid>,@sslinfo,(0,sslinfo,<serverid>,<random#>),<serial>,<fingerprint>)

  For servers using an https connection, returns information about the
  x509 certificate for the connection security. <serial> is the the
  certificate serial number (openssl x509 -noout -serial),
  <fingerprint> is the certificate sha1 fingerprint (openssl x509
  -noout -fingerprint -sha1). The request has no <id> or signature,
  because we don't want to reveal who's asking to a man-in-the-middle.

Of course, an alternative is to do all the line encryption ourself,
using our known key pairs
(http://billstclair.com/blog/trubanc_encryption.html).

----------------------------------------------------------------------

XML-RPC or REST/JSON interface to the client, to make it easy to
connect other languages.

http://wiki.apache.org/couchdb/HTTP_Document_API
http://www.sowbug.org/mt/2008/06/couchdb-cheat-sheet.html

http://www.xmlrpc.com/directory/1568/implementations

----------------------------------------------------------------------

Inbox hash to prevent server or communication tampering?

----------------------------------------------------------------------

Automatic interserver transfers.

Deposit a coupon from one server in another one.

Issuer must issue the asset on both servers, and must have declared to
the server on which the coupon is drawn that the other server is
allowed to receive transfers.

Server on which the coupon is deposited must have an account at the server
on which the coupon was minted.

Ends up as a must-accept invoice on one server and a receipt on the other.

Transaction fees? To servers AND issuer?

How to help the issuer keep track of where the assets he's storing are held?

----------------------------------------------------------------------

Two-phase commit.

----------------------------------------------------------------------

Reducing storage fee percent can reduce the number of digits in the
fraction. This will cause fractional amounts to be truncated, causing
the server to go out of balance by potentially 1 lsb. Can fix this by
rounding up the fractional balance when the percentage changes, or by
remembering the maximum fraction-digits value for each asset type.

Add a "digits" field to the asset record. Blank means compute with
fraction-digits. Non-blank carries forward an old, bigger, value.

----------------------------------------------------------------------

Read about Ricardian contracts:

SOX executive summary:
http://www.systemics.com/docs/sox/execsummary.html

Financial crypto in 7 layers, describing Ricardo and SOX:
http://iang.org/papers/fc7.html

SOX overview with pretty graphics:
http://www.systemics.com/docs/sox/overview.html

Ricardo Executive Summary:
http://www.systemics.com/docs/ricardo/execsummary.html

Trading software built on top of Ricardo:
http://www.systemics.com/docs/ricardo/trading/a_day_in_the_life.html

Good articles on Ricardian Contracts, used to issue currencies:
http://linas.org/mirrors/www.webfunds.org/2001.04.16/guide/ricardian.html
http://iang.org/papers/ricardian_contract.html

You can actually download the source code for the client software, WebFunds:
http://www.gnucash.org/mirrors/mirrors/www.webfunds.org/2001.04.16/

----------------------------------------------------------------------

Read about Chaum without patents:

Lucre implements Chaumian e-cash without patents:
http://anoncvs.aldigital.co.uk/lucre/  (Java, C++)

LUCRATIVE -- Client/Server that calls Lucre.
http://sourceforge.net/projects/lucrative/  (Java)

----------------------------------------------------------------------

Something is causing an arithmetic with NIL error. Print a backtrace
before exiting to help find it.

----------------------------------------------------------------------

"Truledger in Plain English" needs update

Two-phase commit.

"Resync with server" button should notice discrepancies, and do
correction protocol with server. Should server automatically accept,
or just post to be approved by asset issuer? Probably the latter.

======================================================================

Contacts screen should say if you've changed anything since you last
synced with server. Maybe a check-box for "Auto-sync".

Negative spends handled as invoices. Costs two tokens, but no change
to balance. The other guy accepts an invoice as a spend mentioning the
invoice number. Credits the tokens when the invoicer accepts the
spend. Invoicee gets those two tokens if invoicer rejects the
spend. So paying an invoice can't ever cost you tokens. But rejecting
one earns you tokens.

Show the database location on the client screen, unless disabled in server config.

Use Pound or yxorp or Apache mod_proxy to put server on port 80.

When the current commit is a tag, need to link at the bottom of the
client web site screen to tree/<tag>, not commit/<commit>

=============

Contacts don't scale. <Select> shouldn't be used beyond about 20 contacts.
Enter nickname instead.
Sort contacts list. Show only 30 per page. Search.

Change passphrase for private key.
Change server URL, on both server and client.

Hide the command shell in Windows.
http://www.geeksandphreaks.com/index.php/2008/03/05/hide-command-prompt-windows/
1. Create a vbscript file called start.vbs with the following code:
CreateObject("Wscript.Shell").Run """" & WScript.Arguments(0) & """", 0, False
2. To run your file type: start.vbs <name of file>.bat in a command window.

http://www.microsoft.com/technet/scriptcenter/resources/qanda/may06/hey0519.mspx

SERVER CONFIG
=============
New client accounts:
  No restrictions on creating new accounts.
  Allow new accounts with a private key.
  No new account without a coupon.
  Always allow a new account with an existing private key

Coupons:
  Normal: allow coupons and spends to unknown IDs.
  Disabled: Coupons only creatable by specified IDs.

Asset storage fees:
  Limit, 10% default
=============

Asset nicknames

Distinguish intentional from unintentional server errors. Give
backtrace only on unintentional messages. TRULEDGER-ERROR.

Sanity check the server URL to make sure that the HTTPS matches that
for the client.

Default the server URL on the Admin page, to the current URL.

Sometimes it hangs on shutting down the web server.

Server switch to disallow minting of cookies or spends to unknown IDs.
This allows central control over membership.
Add to client "Admin" page.
If disallowed, the check boxes don't appear on the "Balance" page.
Protocol for this should be general:
  (<id>,getprop,<serverid>,<req>,<name>)
  (<serverid>,prop,<serverid>,<time>,<name>,<value>)

Change server URL from the client "Admin" page.
Client login should query server for URL, and fix stuff if it's wrong.

History has some blank lines. Figure out where they come from. Also
some bad parses.

Add fractional balances to Raw Balance screen.

Add a build timestamp to the bottom of the raw balance page.

Installation docs.

If you add an administrator account from the "Admin" page, an account
that already has another server, the tokens are spend to that account,
but the server isn't added. Or something like that. I had to add the
server. The contacts appeared then, so something is wierd.

Why is getreq called four times a the end of login?

Bug
---
Do two spends with the same asset to the same recipient.
Recipient accepts one and ignores the other.
He gets the total of the two, but only one is queued on your inbox.

Windows needs OpenSSL.
  Works in Vista-64:
    http://download.microsoft.com/download/d/2/4/d242c3fb-da5a-4542-ad66-f9661d0a8d19/vcredist_x64.exe
    http://www.slproweb.com/download/Win64OpenSSL_Light-0_9_8k.exe
  For Vista-32:
    http://www.microsoft.com/downloads/details.aspx?FamilyID=9b2da534-3e03-4391-8a4d-074b9f2bc1bf&displaylang=en
   http://slproweb.com/download/Win32OpenSSL_Light-0_9_8k.exe
