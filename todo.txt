Read about Ricardian contracts:

SOX executive summary:
http://www.systemics.com/docs/sox/execsummary.html

Financial crypto in 7 layers, describing Ricardo and SOX:
http://iang.org/papers/fc7.html

SOX overview with pretty graphics:
http://www.systemics.com/docs/sox/overview.html

Ricardo Executive Summary:
http://www.systemics.com/docs/ricardo/execsummary.html

Trading software built on top of Ricardo:
http://www.systemics.com/docs/ricardo/trading/a_day_in_the_life.html

Good articles on Ricardian Contracts, used to issue currencies:
http://linas.org/mirrors/www.webfunds.org/2001.04.16/guide/ricardian.html
http://iang.org/papers/ricardian_contract.html

You can actually download the source code for the client software, WebFunds:
http://www.gnucash.org/mirrors/mirrors/www.webfunds.org/2001.04.16/

----------------------------------------------------------------------

Read about Chaum without patents:

Lucre implements Chaumian e-cash without patents:
http://anoncvs.aldigital.co.uk/lucre/  (Java, C++)

LUCRATIVE -- Client/Server that calls Lucre.
http://sourceforge.net/projects/lucrative/  (Java)

----------------------------------------------------------------------

Something is causing an arithmetic with NIL error. Print a backtrace
before exiting to help find it.

----------------------------------------------------------------------

Permissions

(<id>,grant,<bankid>,<toid>,<req#>,<permission>,grant=grant)

  This command grants <permission> to <toid>. It is signed by the bank:

(<bankid>,@grant,(<id>,grant,<bankid>,<toid>,<req#>,<permission>,grant=grant))

  and stored at:

account/<id>/permissions/<permission>

  Even though it requires a file to store, granting permissions is free.

  if "grant" is included after <permission> in the message, then <id>
  is allowed to grant the permission to others. Otherwise, <id> can
  only use the permission.

  The bank has grant permission for all permissions. If the bank grants
  itself a permission, then other accounts need that permission to do
  what it controls. If the bank does NOT have a permission, then everybody
  is allowed to do what it controls, without permission.

Useful permissions:

  mint-tokens
    allows minting of usage token coupons and spending of usage tokens
    to new accounts. If the bank requires this permission, then only
    it or its proxies can give new acccounts. Allows the bank to
    enforce know-your-customer type rules.

  make-assets
    allows the creation of new assets. If the bank requires this permission,
    then only it or its proxies can create new asset types.

-------

(<id>,deny,<bankid>,<toid>,<req#>,<permission>)
  Remove the grant record stored at account/<id>/permissions/<permission>
  The bank can remove any grant record. Other users can only remove
  grant records that they created, or transitively granted permission
  to create.
 
  Acknowledged with:

(<bankid>,@deny,(<id>,deny,<bankid>,<toid>,<req#>,<permission>))

-------

(<id>,permissions,<bankid>,<req#>,<permission>)

  Searches all accounts for grants of <permission> that were
  transitively granted by <id>. Returns a list of signed permissions:

(<bankid>,@grant,(<id>,grant,<bankid>,<toid>,<req#>,<permission>,grant=grant)).
(<bankid>,@grant,(<id2>,grant,<bankid>,<toid2>,<req#2>,<permission>,grant=grant)).
...
(<bankid>,@grant,(<idN>,grant,<bankid>,<toidN>,<req#N>,<permission>,grant=grant)).

  Maybe this will need to be optimized by storing the list of
  bank-signed grant messages at account/<id>/grants/<permission>.
  Then that can be recusively descended. But it shouldn't take long,
  with even thousands of accounts, to scan them all, remembering
  enough to do the transitivity. Most banks won't give grant
  permission to many accounts.

======================================================================
"Trubanc in Plain English" needs update

Two-phase commit.

"Resync with bank" button should notice discrepancies, and do
correction protocol with bank. Should bank automatically accept,
or just post to be approved by asset issuer? Probably the latter.

======================================================================

Contacts screen should say if you've changed anything since you last
synced with server. Maybe a check-box for "Auto-sync".

Negative spends handled as invoices. Costs two tokens, but no change
to balance. The other guy accepts an invoice as a spend mentioning the
invoice number. Credits the tokens when the invoicer accepts the
spend. Invoicee gets those two tokens if invoicer rejects the
spend. So paying an invoice can't ever cost you tokens. But rejecting
one earns you tokens.

Show the database location on the client screen, unless disabled in server config.

Use Pound or Apache mod_proxy to put server on port 80.

When the current commit is a tag, need to link at the bottom of the
client web site screen to tree/<tag>, not commit/<commit>

=============

Contacts don't scale. <Select> shouldn't be used beyond about 20 contacts.
Enter nickname instead.
Sort contacts list. Show only 30 per page. Search.

Change passphrase for private key.
Change server URL, on both server and client.

Hide the command shell in Windows.
http://www.geeksandphreaks.com/index.php/2008/03/05/hide-command-prompt-windows/
1. Create a vbscript file called start.vbs with the following code:
CreateObject("Wscript.Shell").Run """" & WScript.Arguments(0) & """", 0, False
2. To run your file type: start.vbs <name of file>.bat in a command window.

http://www.microsoft.com/technet/scriptcenter/resources/qanda/may06/hey0519.mspx

SERVER CONFIG
=============
New client accounts:
  No restrictions on creating new accounts.
  Allow new accounts with a private key.
  No new account without a coupon.
  Always allow a new account with an existing private key

Coupons:
  Normal: allow coupons and spends to unknown IDs.
  Disabled: Coupons only creatable by specified IDs.

Asset storage fees:
  Limit, 10% default
=============

Asset nicknames

Distinguish intentional from unintentional server errors. Give
backtrace only on unintentional messages. TRUBANC-ERROR.

Sanity check the server URL to make sure that the HTTPS matches that
for the client.

Default the bank URL on the Admin page, to the current URL.

Sometimes it hangs on shutting down the web server.

Server switch to disallow minting of cookies or spends to unknown IDs.
This allows central control over membership.
Add to client "Admin" page.
If disallowed, the check boxes don't appear on the "Balance" page.
Protocol for this should be general:
  (<id>,getprop,<bankid>,<req>,<name>)
  (<bankid>,prop,<bankid>,<time>,<name>,<value>)

Change bank URL from the client "Admin" page.
Client login should query bank for URL, and fix stuff if it's wrong.

History has some blank lines. Figure out where they come from. Also
some bad parses.

Add fractional balances to Raw Balance screen.

Add a build timestamp to the bottom of the raw balance page.

Installation docs.

If you add an administrator account from the "Admin" page, an account
that already has another bank, the tokens are spend to that account,
but the bank isn't added. Or something like that. I had to add the
bank. The contacts appeared then, so something is wierd.

Why is getreq called four times a the end of login?

Bug
---
Do two spends with the same asset to the same recipient.
Recipient accepts one and ignores the other.
He gets the total of the two, but only one is queued on your inbox.

Windows needs OpenSSL.
  Works in Vista-64:
    http://download.microsoft.com/download/d/2/4/d242c3fb-da5a-4542-ad66-f9661d0a8d19/vcredist_x64.exe
    http://www.slproweb.com/download/Win64OpenSSL_Light-0_9_8k.exe
  For Vista-32:
    http://www.microsoft.com/downloads/details.aspx?FamilyID=9b2da534-3e03-4391-8a4d-074b9f2bc1bf&displaylang=en
   http://slproweb.com/download/Win32OpenSSL_Light-0_9_8k.exe
