The Truledger client webapp uses JSON to encode client function calls.

The general format of a request is:

  http://truleder.com/json/?eval=<string>

This can be sent via GET or POST, as with ?msg=<msg> commands to the server.

The general form of a <string> is:

  [function,{name:value,name:value,...}]

Results vary by function and are documented with each function.
Error results are always returned as {"@type":"error","message":<string>}

["newuser",{"passphrase":<string>,"keysize":<integer>,"name":<string>,
          "privkey":<string>:<boolean>,"url":<string>,
          "coupon":<string>,"proxy":<string>] => <session-string>
  Create a new user with the given "passphrase". Error if already there.
  All other parameters are optional
  If "keysize" is included, create a new private key of the given size
    (512, 1024, 2048, 3072, or 4096).
  If "name" is included, it will be attached to the new server account.
  If "privkey" is included, it should be the ASCII encoding of
    the private key, encrypted with the passhprase.
    That will create a local account on a client with no running server.
    If you include a "url", will look for the account on that server.
    If you include a "coupon", will register with that coupon on its server.
  If "coupon" is included, it should be a coupon for
    a truledger server on which you want to create an account.
    This is not required if logging into a client with no running server,
    But it IS required if there is a running server, to avoid
    a multitude of new accounts being created by bots.
  If "proxy" is included, it is the "host:port" for an http proxy
    to use to contact the server in "coupon" or "url".
  On successful return, the new user is logged in to the client,
    and, if "coupon" was included, the current server is set to
    that server.
  Return a <session-string>, for use with the other functions.

["getprivkey",{"passphrase":<string>}] => <string>
  Lookup the private key associated with passphrase, and
  return it as a string.

["login",{"passphrase":<string>}] => <session-string>
  Login with an existing private key, using its passphrase.
  Set the current server to the last server set.
  Return a <session-string> for use with the other functions.

["logout",{"session":<session-string>}] => null
  Release the resources associated with <session-string>.

["current-user",{"session":<session-string>}] => <user-id>
  Return the user id string of the currently logged in user.

["getpubkey",{client:<session-string>,id:<user-id>}] => <string>
  Return the public key for "id", which defaults to the
  currently logged-in user.

["current-server",{"session":<session-string>}] => <serverid>
  Returns the ID of the current server, or null if there isn't one.

["getserver",{"session":<session-string>,"serverid":<string>}]
  => {"@type":"server","id":<string>,"name":<string>,"url":<string>,"proxy":<string>}
  Return information for the given "serverid", which defaults to
  the current server, when there is one.

["getservers",{"session":<session-string>}]
  => [<server-info>, ...]
  Get the "getserver" info for every server known to the currently
  logged in user.

["addserver",{"session":<session-string>,"coupon":<string>,"name":<string>,
              "proxy":<string>}]
  => <serverid>
  Add a server to the logged-in account.
  "coupon" will usually be an introduction coupon from that server,
    but it can be just a URL, if you already have an account there.
  "name" is an optional name to use to identify yourself on the server.
  "proxy" is an optional http proxy, "host:port", to use for contacting
    the server.
  Returns the server ID, a string.

["setserver",{"session":<session-string>,"serverid":<string>}] => null
  Set the current server to "serverid".

["privkey-cached?",{"session":<session-string>,"serverid":<string>}] => <boolean>
  Return whether or not the private key for "serverid", which defaults
    to the current server, is cached on the server.

["cache-privkey",{"session":<session-string>,"uncache?":<boolean>}]
  Cache the private key on the current server,
  or uncache it if "uncache?" is true.

["getcontact",{"session":<session-string>,"id":<string>}]
  => {"@type":"contact","id":<string>,"name":<string>,"nickname":<string>,
      "note":<string>}
  Get a single contact, but its "id".

["getcontacts",{"session":<session-string>}]
  => [<contact-info>,...]
  Return the contacts for the current server.
  <contact-info> is as returned by getcontact

["addcontact",{"session":<session-string>,"id":<string>,"nickname":<string>,
             "note":<string>}] => null
  Add or update a contact with the given "id" and optional "nickname" and "note".

["deletecontact",{"session":<session-string>,"id":<string>}] => null
  Remove the contact with the given "id".

["sync-contacts",{"session":<session-string>}] => null
  Synchronize client contacts with current server.

["getasset",{"session":<session-string>,"assetid":<string>,"force-server?":true}]
  => {"@type":"asset","id":<string>,"assetid":<string>,
      "scale":<integer>,"precision":<integer>,"name":<string>,
      "issuer":<string>,"percent":<string>}
  Get information about "assetid".
  If "force-asset?" is included and true, refresh the local
  information about the asset from the server.

["getassets",{"session":<session-string>}] => [<asset-info>,...]
  Return a list of all assets for which the customer has balances,
  as a list of returns from "getasset".

["addasset",{"session":<session-string>,"scale":<integer>,"precision":<integer>,
             "assetname":<string>,"percent":<string>}] => <assetid>
  Add a new asset, or update the storage fee "percent" of an existing asset.
  "percent" is optional.
  The returned <assetid> is a string.

["getfees",{"session":<session-string>,"reload?":<boolean>}]
  => [{"@type":"fee","type":<string>,"assetid":<string>,"assetname":<string>,
       "amount":<string>,"formatted-amount":<string>"}, ...]
  Returns a list of "fee" arrays.
  There are always at least two elements in that array.
  The first element is of "type":"tranfee"
  The second element is of "type":"regfee"
  The other elements are of "type":"spend" or "type":"transfer"
  If "reload?" is included and true, reloads the fees from the server.

["getbalance",{"session":<session-string>,"assetid":<string>,"acct":<string>}]
  => {"@type":"balance>,"acct":<string>,"assetid":<string>,"assetname":<string>,
      "amount":<string>,"time":<string>,"formatted-amount":<string>}
  Get a single balance.
  "acct" defaults to "main".

["getbalances",{"session":<session-string>,"assetid":<string>,"acct":<string>}]
  => [{"@type":"balance",...},...]
  Get a set of balances, sorted by "acct", then "assetname".
  "assetid" and "acct" default to all.

["getfraction",{"session":<session-string>,"assetid":<string>}]
  => {"@type":"fraction","assetid":<string>,"assetname":<string>,
      "amount":<string>,"scale":<integer>}
  Get the fractional balance for an assetid.
  Fractional balances are created when you pay storage fees on
  a balance.

["getfractions",{"session":<session-string>}]
  =>[{"@type":"fraction",...},...]
  Return a list of all fractional balances.

["getstoragefee",{"session":<session-string>,"assetid":<string>}]
  => {"@type":"storagefee","assetid":<string>,"assetname":<string>,
      "amount":<string>,"time":<string>,"formatted-amount":<string>,
      "fraction":<string>}
  Return the accumulated storage fees for a single assetid.
  Only relevant if logged in as the issuer of the asset.
  Return has the same properties as "@type":"balance", with the addition
  of the "fraction".

["getstoragefees",{"session":<session-string>}]
  => [{"@type":"storagefee",...},...]
  Return a list of all the storage fees.

["spend",{"session":<session-string>,"toid":<string>,"assetid":<string>,
          "formatted-amount":<string>,"acct":<string>,"note":<string>}]
  => {"@type":"spendresult","transaction-fee":<string>,"storage-fee":<string>,
      "coupon":<string>}
  Spend "formatted-amount" of "assetid" to "toid".
  "acct" defaults to "main"
  "note" is optional.
  If "toid" is "coupon", mints a coupon instead of spending to another user
  If "toid" is the logged in user's ID, then this is a transfer.
    "acct" should be a list: [<fromacct>,<toacct>].
  "transaction-fee", "storage-fee" in the result may be omitted.
  "coupon" will be present in the result only if "toid" was "coupon".

["spendreject",{"session":<session-string>,"time":<string>,"note":<string>}]
  => null
  Cancels the spend with the given "time" (as returned by "getoutbox").
  "note" is optional.
  The spend will be moved into the inbox, where it will look
    just like a rejection from the recipient of the spend.
    Use "processinbox" to remove it.
  You lose your transaction fee when you reject a spend.
    This discourages making it a habit.

["is-history-enabled?",{"client:<session-string>"}] => <boolean>
  Return true if keeping history is enabled.

["set-history-enabled",{"client:<session-string>","enabled?":<boolean>}] => enabled?
  Enable history if "enabled?" is true. Disable otherwise.

["get-history-times",{"session":<session-string>}] => [<string>,...]
  Get the times for which there are history items.

["get-history-items",{"session":<session-string>,"time":<string>}]
  => [{"@type":"history","time":<string>,"request":<string>,
       "fromid":<string>,"toid":<string>,
       "amount":<string>,"formatted-amount":<string>,"assetid":<string>,
       "assetname":<string>,"note":<string>,"response":<string>},...]
  Returns all the history items for "time".

["remove-history-items",{"session":<session-string>,"time":<string>}] => null
  Remove all the history items for "time".

["getinbox",{"session":<session-string>}]
  => [{"@type","inbox","request":<string>,"id":<string>,"time":<string>,
       "msgtime":<string>,"assetid":<string>,"assetname":<string>,
       "amount":<string>,"formatted-amount":"string","note":<string>,
       "reply":<string>,"items":[{"@type":"fee",...}]},...]
  Return the contents of the inbox.
  "request" is "spend", "spend|accept", or "spend|reject".
  "id" is the user ID of the source of the item.
  "time" is the time on the server-signed inbox item.
  "msgtime" is the time on the user-signed message.
  "assetid" is the ID of the asset.
  "assetname" is the name of the asset.
  "amount" is the asset amount, an integer string.
  "formatted-amount" is the amount formatted with the asset's scale & precision.
  "note" is the note on the original message.
  "reply" is the note on the reply for "spend|accept" or "spend|reject".
  "items" is a list of "type":"tranfee" "fee" items.

["processinbox",{"session":<session-string>,
                 "directions":[{"@type":"processinbox",...},...]}] => null
  Process some or all of the inbox items returned by "getinbox".
  The full form of the "directions" items is:
    {"@type":"processinbox","time":<string>,"request":<string>,
     "note":<string>,"acct":<string>}
  "time" is a "time" from a "getinbox" item.
  "request" is "spend|accept" or "spend|reject" for inbox items
    whose "request" is "spend". Ignored for "spend|accept" and
    "spend|reject" inbox items.
  "note" is an optional note to send back to the spender.
    Ignored for other than "spend" inbox items.
  "acct" is the acct into which to deposit the assets, default "main".
    Ignored for other than "request":"spend|accept" on "spend" inbox items

["storagefees":{"session":<session-string>}] => null
  Tell the server to move the non-fractional part of the "getstoragefees"
  fees to the inbox. You can then then see them with "getinbox" and process
  them with "processinbox".

["getoutbox":{"session":<session-string>}]
  => [{"@type":"outbox","time":<string>,"id":<string>,"request":<string>,
       "assetid":<string>,"assetname":<string>,"amount":<string>,
       "formatted-amount":<string>,"note":<string>,
       "items":[{"@type":"fee",...}],"coupons":[<string>]},...]
  Return information about outstanding spends.
  You can use the "time" for "rejectspend".
  Other than that, it's only information, showing "spend"
  requests that have not yet been accepted or rejected, and then
  completed with "processinbox".

["redeem",{"session":<session-string>,"coupon":<string>}] => null
  Redeem a coupon. If successful, add an inbox entry for the
  coupon spend.

["getversion",{"session":<session-string>}]
  => {"@type":"version","version":<string>,"time":<string>}
  Get the server version and build time.

["get-permissions",{"session":<session-string>,"permission":<string>,
                    "reload?":<boolean>}]
  => [{"@type":"permission","id":<string>,"toid":<string>,"permission":<string>,
       "grant?":<boolean>,"time":<string>},...]
  Get permissions.
  If "permission" is included, get only that one permission.
  If "reload?" is true, reload the permissions from the server.
  The currently supported "permission"s are "mint-tokens", "mint-coupons",
  and "add-asset".
  The "time" property of the return values will be missing for default permissions.

["get-granted-permissions",{"session":<session-string>}]
  => [{"@type:"permission",...},...]
  Return the permissions you've directly granted.

["grant",{"session":<session-string>,"toid":<string>,"permission":<string>,
          "grant?":<boolean>} => null
  Grant "permission" to "toid". Give him permission to grant that permission
  if "grant?" is true.

["deny",{"session":<session-string>,"toid":<string>,"permission":<string>}] => null
  Deny "permission" to "toid".

["audit",{"session":<session-string>,"assetid":<string>}]
  => {"@type":"audit","amount":<string>,"formatted-amount":<string>,
      "fraction":<string>}
  Add up all the balances for "assetid" and return the result.
  Should be all zeroes, unless the server is out of balance.
  Only the asset issuer or the server can request an audit.
